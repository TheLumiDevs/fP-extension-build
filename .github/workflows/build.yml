name: Build fakeProfile

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      project:
        description: 'Which project to build'
        required: true
        type: choice
        options:
        - All
        - Equicord
        - Vencord
        default: 'All'
      release:
        description: 'Create a release (only for manual runs)'
        required: true
        type: boolean
        default: false
      run_as_schedule:
        description: 'Run as if it were a scheduled build'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [Equicord, Vencord]
        include:
          - project: Equicord
            repo: Equicord/Equicord
            userscript_name: Vencord.user.js
          - project: Vencord
            repo: Vendicated/Vencord
            userscript_name: Vencord.user.js


    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Checkout ${{ matrix.project }}
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ matrix.repo }}
          path: ${{ matrix.project }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Cache last successful commit SHA
        id: cache-sha
        uses: actions/cache@v4.2.3
        with:
          path: last_successful_sha_${{ matrix.project }}.txt
          key: ${{ matrix.project }}-sha-cache

      - name: Get commit info
        id: get_commit_info
        working-directory: ${{ matrix.project }}
        run: |
          UPSTREAM_SHA=$(git rev-parse HEAD)
          echo "commit_sha=${UPSTREAM_SHA}" >> $GITHUB_OUTPUT
          echo "commit_sha_short=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
          tag_name="build-${{ matrix.project }}-${UPSTREAM_SHA}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.run_as_schedule }}" != "true" ]]; then
            tag_name="${tag_name}-Forced"
          fi
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          SHA_DISPLAY="[\`$(git rev-parse --short=7 HEAD)\`](https://github.com/${{ matrix.repo }}/commit/$(git rev-parse HEAD))"
          LAST_BUILT_SHA=""
          if [[ -f ../last_successful_sha_${{ matrix.project }}.txt ]]; then
            LAST_BUILT_SHA=$(cat ../last_successful_sha_${{ matrix.project }}.txt)
            LAST_BUILT_SHA_SHORT=$(git rev-parse --short=7 $LAST_BUILT_SHA)
            echo "last_commit_sha=${LAST_BUILT_SHA}" >> $GITHUB_OUTPUT
            echo "last_commit_sha_short=${LAST_BUILT_SHA_SHORT}" >> $GITHUB_OUTPUT
            COMMIT_LOG=$(git log --pretty=format:"- %s - %an - [%h](https://github.com/${{ matrix.repo }}/commit/%H)" $LAST_BUILT_SHA..HEAD)
          else
            COMMIT_LOG=$(git log -1 --pretty=format:"- %s - %an - [%h](https://github.com/${{ matrix.repo }}/commit/%H)")
          fi
          echo "sha_display=${SHA_DISPLAY}" >> $GITHUB_OUTPUT
          # Properly handle multi-line output with JSON encoding
          echo "commit_log<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COMMIT_LOG" | jq -Rs . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          # Handle Co-authored-by trailers properly
          COMMIT_MSG=$(../node_modules/.bin/ts-node ../src/get_commit.ts)
          echo "commit_message=${COMMIT_MSG}" >> $GITHUB_OUTPUT

      - name: Determine if build should proceed
        id: should_run
        run: |
          PROCEED="false"
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "push" ]]; then
            PROCEED="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.project }}" == "All" || "${{ github.event.inputs.project }}" == "${{ matrix.project }}" ]]; then
              PROCEED="true"
            else
               echo "Skipping ${{ matrix.project }} as it was not selected for this manual run."
            fi
          fi
          echo "decision=${PROCEED}" >> $GITHUB_OUTPUT

      - name: Clone fakeProfile plugin
        if: steps.should_run.outputs.decision == 'true'
        run: |
          mkdir -p ${{ matrix.project }}/src/userplugins
          git clone https://github.com/TheLumiDevs/fakeProfile.git ${{ matrix.project }}/src/userplugins/fakeProfile

      - name: Add fakeProfile CSP
        if: steps.should_run.outputs.decision == 'true'
        run: |
          node_modules/.bin/ts-node src/add-csp.ts ${{ matrix.project }}

      - name: Build extension and userscript
        if: steps.should_run.outputs.decision == 'true'
        working-directory: ${{ matrix.project }}
        run: |
          npm i -g pnpm
          pnpm i --no-frozen-lockfile
          PLUGINS_DIR=src/userplugins pnpm buildWeb

      - name: Get Current Time
        if: steps.should_run.outputs.decision == 'true'
        id: current-time
        run: |
          echo "date=$(TZ='UTC' date +'%Y/%m/%d')" >> $GITHUB_OUTPUT
          timestamp=$(date +%s)
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
          echo "footer_time=$(TZ='UTC' date --iso-8601=seconds)" >> $GITHUB_OUTPUT

      - name: Generate certificate fingerprints
        id: cert-fingerprints
        if: steps.should_run.outputs.decision == 'true'
        run: |
          openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 1 -nodes -subj '/CN=example.com' >/dev/null 2>&1
          FINGERPRINT1_RAW=$(openssl x509 -in cert.pem -fingerprint -sha1 -noout | sed 's/SHA1 Fingerprint=//' | tr -d ':')
          FINGERPRINT2_RAW=$(openssl x509 -in cert.pem -fingerprint -sha256 -noout | sed 's/SHA256 Fingerprint=//' | tr -d ':')
          echo "FINGERPRINT1=$(echo "$FINGERPRINT1_RAW" | node_modules/.bin/ts-node src/format-fingerprint.ts)" >> $GITHUB_OUTPUT
          echo "FINGERPRINT2=$(echo "$FINGERPRINT2_RAW" | node_modules/.bin/ts-node src/format-fingerprint.ts)" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.should_run.outputs.decision == 'true' && (github.event_name == 'schedule' || github.event.inputs.release == 'true' || github.event.inputs.run_as_schedule == 'true')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          tag_name="${{ steps.get_commit_info.outputs.tag_name }}"
          if git ls-remote --exit-code origin "refs/tags/$tag_name" > /dev/null 2>&1; then
            echo "Tag $tag_name already exists in remote. Skipping tag creation."
          else
            git tag -fa "$tag_name" -m "Release $tag_name"
            git push origin "$tag_name"
          fi
      - name: Create Release and Upload Assets
        if: steps.should_run.outputs.decision == 'true' && (github.event_name == 'schedule' || github.event.inputs.release == 'true' || github.event.inputs.run_as_schedule == 'true')
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_LOG_JSON: ${{ steps.get_commit_info.outputs.commit_log }}
        shell: bash
        run: |
          set -exo pipefail
          tag_name="${{ steps.get_commit_info.outputs.tag_name }}"

          if gh release view "$tag_name" >/dev/null 2>&1; then
            echo "Release $tag_name already exists. Skipping."
            exit 0
          fi

          title_suffix=""
          prerelease_flag=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.run_as_schedule }}" != "true" ]]; then
            title_suffix=" - Forced Build"
            prerelease_flag="--prerelease"
          fi

          chrome_asset="${{ matrix.project }}/dist/extension-chrome.zip"
          firefox_asset="${{ matrix.project }}/dist/extension-firefox.zip"
          userscript_asset="${{ matrix.project }}/dist/${{ matrix.userscript_name }}"

          # Get asset details
          chrome_size=$(stat -c%s "$chrome_asset")
          chrome_sha256=$(sha256sum "$chrome_asset" | awk '{print $1}')
          echo "chrome_size=$(numfmt --to=iec-i --suffix=B --format=%.2f $chrome_size)" >> $GITHUB_OUTPUT
          echo "chrome_sha256=$chrome_sha256" >> $GITHUB_OUTPUT

          firefox_size=$(stat -c%s "$firefox_asset")
          firefox_sha256=$(sha256sum "$firefox_asset" | awk '{print $1}')
          echo "firefox_size=$(numfmt --to=iec-i --suffix=B --format=%.2f $firefox_size)" >> $GITHUB_OUTPUT
          echo "firefox_sha256=$firefox_sha256" >> $GITHUB_OUTPUT

          userscript_size=$(stat -c%s "$userscript_asset")
          userscript_sha256=$(sha256sum "$userscript_asset" | awk '{print $1}')
          echo "userscript_size=$(numfmt --to=iec-i --suffix=B --format=%.2f $userscript_size)" >> $GITHUB_OUTPUT
          echo "userscript_sha256=$userscript_sha256" >> $GITHUB_OUTPUT

          # Create temp notes file safely
          notes_file=$(mktemp)
          {
            echo "### ${{ matrix.project }} commit"
            echo
            echo "$COMMIT_LOG_JSON" | jq -r
          } > "$notes_file"

          echo "Creating new release $tag_name."
          echo "Assets:"
          ls -l "$chrome_asset" "$firefox_asset" "$userscript_asset"

          # Use a static command based on the prerelease flag to avoid dynamic construction
          if [[ -n "$prerelease_flag" ]]; then
            echo "Creating a prerelease."
            gh release create "$tag_name" \
              "$chrome_asset" \
              "$firefox_asset" \
              "$userscript_asset" \
              --title "fakeProfile auto build for ${{ matrix.project }} - ${{ steps.current-time.outputs.date }}${title_suffix}" \
              --notes-file "$notes_file" \
              --prerelease
          else
            echo "Creating a stable release."
            gh release create "$tag_name" \
              "$chrome_asset" \
              "$firefox_asset" \
              "$userscript_asset" \
              --title "fakeProfile auto build for ${{ matrix.project }} - ${{ steps.current-time.outputs.date }}${title_suffix}" \
              --notes-file "$notes_file" \
              --latest
          fi

          release_url=$(gh release view "$tag_name" --json url -q .url)
          
          # Cleanup
          rm "$notes_file"

          echo -n "${{ steps.get_commit_info.outputs.commit_sha }}" > last_successful_sha_${{ matrix.project }}.txt
          echo "html_url=${release_url}" >> $GITHUB_OUTPUT
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "title_suffix=${title_suffix}" >> $GITHUB_OUTPUT

      - name: Get direct download URLs
        if: steps.create_release.outputs.tag_name != ''
        id: get_download_urls
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_info=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.create_release.outputs.tag_name }})
          chrome_url=$(echo "$release_info" | jq -r '.assets[] | select(.name == "extension-chrome.zip") | .browser_download_url')
          firefox_url=$(echo "$release_info" | jq -r '.assets[] | select(.name == "extension-firefox.zip") | .browser_download_url')
          userscript_url=$(echo "$release_info" | jq -r '.assets[] | select(.name == "${{ matrix.userscript_name }}") | .browser_download_url')
          echo "chrome_url=$chrome_url" >> $GITHUB_OUTPUT
          echo "firefox_url=$firefox_url" >> $GITHUB_OUTPUT
          echo "userscript_url=$userscript_url" >> $GITHUB_OUTPUT

      - name: Get random color
        if: steps.create_release.outputs.tag_name != ''
        id: random_color
        run: echo "embed_color=$(node_modules/.bin/ts-node src/random-color.ts)" >> $GITHUB_OUTPUT

      - name: Send success message to Discord
        if: steps.create_release.outputs.tag_name != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_FILE_PATHS: "${{ matrix.project }}/dist/extension-chrome.zip,${{ matrix.project }}/dist/extension-firefox.zip,${{ matrix.project }}/dist/${{ matrix.userscript_name }}"
          DISCORD_PAYLOAD: |
            {
              "content": "A new build for **${{ matrix.project }}** is available!",
              "embeds": [
                {
                  "title": "🎉 fakeProfile for __${{ matrix.project }}__ has a new build!${{ steps.create_release.outputs.title_suffix }} 🎉",
                  "description": "## 📝 Build Info\n> - **Commit**\n>  - **SHA**: ${{ steps.get_commit_info.outputs.sha_display }}\n>  - **Title**: ${{ steps.get_commit_info.outputs.commit_message }}\n>  - **Author**: [${{ steps.get_commit_info.outputs.commit_author }}](https://github.com/${{ matrix.repo }}/commits?author=${{ steps.get_commit_info.outputs.commit_author }})\n## ℹ️ About this build\n> - **Release**: [${{ steps.current-time.outputs.date }}${{ steps.create_release.outputs.title_suffix }}](${{ steps.create_release.outputs.html_url }})\n> - **Build At**: <t:${{ steps.current-time.outputs.timestamp }}:f> (<t:${{ steps.current-time.outputs.timestamp }}:R>)\n> - **Project**: ${{ matrix.project }}\n> - **Run ID**: [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n> - **Run on branch**: `${{ github.ref }}`\n## 📥 Download\n> - **Chrome Extension**: **[Click Here](${{ steps.get_download_urls.outputs.chrome_url }})** **Size:** `${{ steps.create_release.outputs.chrome_size }}`\n>  - SHA256: `${{ steps.create_release.outputs.chrome_sha256 }}`\n> - **Firefox Extension**: **[Click Here](${{ steps.get_download_urls.outputs.firefox_url }})** **Size:** `${{ steps.create_release.outputs.firefox_size }}`\n>  - SHA256: `${{ steps.create_release.outputs.firefox_sha256 }}`\n> - **Userscript**: **[Click Here](${{ steps.get_download_urls.outputs.userscript_url }})** **Size:** `${{ steps.create_release.outputs.userscript_size }}`\n>  - SHA256: `${{ steps.create_release.outputs.userscript_sha256 }}`\n## Certificate Fingerprints\n```plaintext\n${{ steps.cert-fingerprints.outputs.FINGERPRINT1 }}\n```\n```plaintext\n${{ steps.cert-fingerprints.outputs.FINGERPRINT2 }}\n```\n-# Don't forget add an star for our **[repository](https://github.com/TheLumiDevs/fP-extension-build)**",
                  "color": ${{ steps.random_color.outputs.embed_color }},
                  "footer": {
                    "text": "Build completed at ${{ steps.current-time.outputs.footer_time }}",
                    "icon_url": "https://avatars.githubusercontent.com/u/221838119?s=200&v=4"
                  }
                }
              ]
            }
        run: |
          npm install
          node_modules/.bin/ts-node src/send-webhook.ts

      - name: Capture build error details
        if: failure()
        id: capture_error
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ matrix.project }}
        run: |
          log_data=$(ts-node src/get-failed-step-log.ts)
          log_content=$(echo "$log_data" | jq -r .log)
          step_name=$(echo "$log_data" | jq -r .stepName)
          log_file=$(echo "$log_data" | jq -r .logFile)
          echo "failed_command<<EOF" >> $GITHUB_OUTPUT
          echo "$log_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "error_step=$step_name" >> $GITHUB_OUTPUT
          echo "log_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "log_file=$log_file" >> $GITHUB_OUTPUT

      - name: Restore last failure notification timestamp
        if: failure()
        id: restore_failure_ts
        uses: actions/cache@v4
        with:
          path: last_failure_notification_timestamp_${{ matrix.project }}.txt
          key: failure-notification-timestamp-${{ matrix.project }}

      - name: Decide whether to send failure notification
        if: failure()
        id: decide_failure_notification
        run: |
          should_notify="true"
          if [[ -f last_failure_notification_timestamp_${{ matrix.project }}.txt ]]; then
            last_ts=$(cat last_failure_notification_timestamp_${{ matrix.project }}.txt)
            current_ts=$(date +%s)
            if (( current_ts - last_ts < 3600 )); then
              should_notify="false"
              echo "Last failure notification was sent less than an hour ago. Skipping."
            fi
          fi
          echo "should_notify=${should_notify}" >> $GITHUB_OUTPUT

      - name: Send fail message to Discord
        if: failure() && steps.decide_failure_notification.outputs.should_notify == 'true'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_FILE_PATHS: ${{ steps.capture_error.outputs.log_file }}
          DISCORD_PAYLOAD: |
            {
              "content": "The build for **${{ matrix.project }}** has failed.",
              "embeds": [
                {
                  "title": "🚨 ${{ matrix.project }} Build Failed - Action Required",
                  "description": "## ❌ Build Failure Details\n**Project:** ${{ matrix.project }}\n**Failed Step:** `${{ steps.capture_error.outputs.error_step }}`\n**Workflow Run:** [#${{ github.run_id }}](${{ steps.capture_error.outputs.log_url }})\n**Branch:** `${{ github.ref }}`\n\n## 📝 Log Output\n```text\n${{ steps.capture_error.outputs.failed_command }}\n```\n\n## 🛠️ Required Action\n1. Check the [complete logs](${{ steps.capture_error.outputs.log_url }}) for more details.\n2. Review the failed step and the log output above to diagnose the issue.\n3. Re-run the workflow after applying the necessary fixes.",
                  "color": 0xe74c3c,
                  "footer": {
                    "text": "Failure detected at ${{ steps.current-time.outputs.footer_time }}",
                    "icon_url": "https://avatars.githubusercontent.com/u/221838119?s=200&v=4"
                  }
                }
              ]
            }
        run: |
          npm install
          node_modules/.bin/ts-node src/send-webhook.ts

      - name: Update failure notification timestamp
        if: failure() && steps.decide_failure_notification.outputs.should_notify == 'true'
        run: |
          echo "$(date +%s)" > last_failure_notification_timestamp_${{ matrix.project }}.txt

