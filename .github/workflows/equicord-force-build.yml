name: Equicord fakeProfile force build

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force a build'
        required: true
        type: boolean
        default: false
      force_release:
        description: 'Create a pre-release'
        required: true
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Checkout Equicord
        uses: actions/checkout@v4.1.7
        with:
          repository: Equicord/Equicord
          path: Equicord

      - name: Get last Equicord commit info
        id: last_equicord_commit
        run: |
          cd Equicord
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Clone fakeProfile plugin
        if: github.event.inputs.force_build == 'true'
        run: |
          mkdir -p Equicord/src/plugins
          git clone https://github.com/TheLumiDevs/fakeProfile.git Equicord/src/plugins/fakeProfile

      - name: Build extension and userscript (Forced)
        if: github.event.inputs.force_build == 'true'
        run: |
          cd Equicord
          npm i -g pnpm
          pnpm i
          pnpm buildWeb

      - name: Get Current Time
        id: current-time
        run: |
          echo "date=$(TZ='UTC' date +'%Y/%m/%d %H:%M:%S')" >> $GITHUB_OUTPUT
          timestamp=$(date +%s)
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT

      - name: Create Release and Upload Assets
        if: github.event.inputs.force_release == 'true'
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_url=$(gh release create ${{ github.run_id }} \
            --title "fakeProfile Equicord ${{ steps.current-time.outputs.date }} (Forced Build)" \
            --notes "

          ### Equicord last commit details
          - **Author:** ${{ steps.last_equicord_commit.outputs.commit_author }}
          - **Message:** [${{ steps.last_equicord_commit.outputs.commit_message }}](https://github.com/Equicord/Equicord/commit/${{ steps.last_equicord_commit.outputs.commit_sha }})
          " \
            --prerelease \
            Equicord/dist/extension-chrome.zip Equicord/dist/extension-firefox.zip Equicord/dist/Equicord.user.js)
          echo "html_url=${release_url}" >> $GITHUB_OUTPUT

      - name: Get direct download URLs
        if: github.event.inputs.force_release == 'true'
        id: get_download_urls
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_info=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.run_id }})
          chrome_url=$(echo "$release_info" | jq -r '.assets[] | select(.name == "extension-chrome.zip") | .browser_download_url')
          firefox_url=$(echo "$release_info" | jq -r '.assets[] | select(.name == "extension-firefox.zip") | .browser_download_url')
          userscript_url=$(echo "$release_info" | jq -r '.assets[] | select(.name == "Equicord.user.js") | .browser_download_url')
          echo "chrome_url=$chrome_url" >> $GITHUB_OUTPUT
          echo "firefox_url=$firefox_url" >> $GITHUB_OUTPUT
          echo "userscript_url=$userscript_url" >> $GITHUB_OUTPUT

      - name: Get random quote
        if: github.event.inputs.force_release == 'true'
        id: random_quote
        run: echo "quote=$(shuf -n 1 quotes.txt)" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: github.event.inputs.force_release == 'true'
        uses: SARISIA/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "🎉 fakeProfile extension & userscript has new complete build! (Forced Build) 🎉"
          description: |
            ## 📝 Build Info
            > - **Commit**
            >  - Code: [`${{ steps.last_equicord_commit.outputs.commit_sha }}`](https://github.com/Equicord/Equicord/commit/${{ steps.last_equicord_commit.outputs.commit_sha }})
            >  - Title: [${{ steps.last_equicord_commit.outputs.commit_message }}](https://github.com/Equicord/Equicord/commit/${{ steps.last_equicord_commit.outputs.commit_sha }})
            >  - Author: [${{ steps.last_equicord_commit.outputs.commit_author }}](https://github.com/Equicord/Equicord/commits?author=${{ steps.last_equicord_commit.outputs.commit_author }})
            ## ℹ️ About this build
            > - **Release**: [${{ steps.current-time.outputs.date }} (Forced Build)](${{ steps.create_release.outputs.html_url }})
            > - **Build**: <t:${{ steps.current-time.outputs.timestamp }}:R>
            ## 📥 Download
            > - **Chrome Extension**: **[Click Here](${{ steps.get_download_urls.outputs.chrome_url }})**
            > - **Firefox Extension**: **[Click Here](${{ steps.get_download_urls.outputs.firefox_url }})**
            > - **Userscript**: **[Click Here](${{ steps.get_download_urls.outputs.userscript_url }})**
            ## 💬 Quote
            ```txt
            ${{ steps.random_quote.outputs.quote }}
            ```
          color: 0x2ec27c
          username: Lumi Devs
          avatar_url: "https://images-ext-1.discordapp.net/external/hM4wlZ1R3US3OS3TnWyrFKYAkMMlLZHoD0BUQ7iv4AA/%3Fsize%3D4096/https/cdn.discordapp.com/icons/1117373291095662623/b570d8dea0899d437ac59dddec5c21dc.png?format=webp&quality=lossless"

      - name: Get random joke
        id: random_joke
        if: failure()
        run: echo "joke=$(shuf -n 1 quotes.txt)" >> $GITHUB_OUTPUT

      - name: Send failure notification
        if: failure()
        uses: SARISIA/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: failure
          title: "😭 Build Failed"
          description: |
            The Equicord build process failed. Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for logs.
            ## 😹 Joke
            ```txt
            ${{ steps.random_joke.outputs.joke }}
            ```
          color: 0xe74c3c